{
    "Entity Class": {
        "prefix": [ "dna.ent-class" ],
        "body": [
            "using System;",
            "using System.Collections.Generic;",
            "",
            "namespace ${1:Project}.Data.Entities",
            "{",
                "\tpublic class ${2:Entity}",
                "\t{",
                    "\t\tpublic int Id { get; set; }",
                    "\t\t$0",
                "\t}",
            "}"
        ]
    },
    "DbSet Property": {
        "prefix": [ "dna.ent-dbset" ],
        "body": [
            "public DbSet<${1:T}> ${2:Plural} { get; set; }"
        ]
    },
    "Entity Key Map": {
        "prefix": [ "dna.ent-keymap" ],
        "body": [
            "modelBuilder",
            "\t.Entity<${1:T}>()",
            "\t.HasMany(x => x.${2:Many})",
            "\t.WithOne(x => x.${1:T})",
            "\t.HasForeignKey(x => x.${1:T}Id)",
            "\t.IsRequired()",
            "\t.OnDelete(DeleteBehavior.Restrict);"
        ]
    },
    "Extension Class": {
        "prefix": [ "dna.ext-class" ],
        "body": [
            "using System;",
            "using System.Collections.Generic;",
            "using System.Linq;",
            "using System.Threading.Tasks;",
            "",
            "using Microsoft.EntityFrameworkCore;",
            "",
            "using ${1:Project}.Core;",
            "using ${1:Project}.Core.ApiQuery;",
            "using ${1:Project}.Data.Entities;",
            "",
            "namespace ${1:Project}.Data.Extensions",
            "{",
                "\tpublic static class ${2:Entity}Extensions",
                "\t{",
                    "\t\t$0",
                "\t}",
            "}"
        ]
    },
    "Extension Class Baseline": {
        "prefix": [ "dna.ext-base" ],
        "body": [
            "using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Threading.Tasks;",
			"",
			"using Microsoft.EntityFrameworkCore;",
			"",
			"using ${1:Project}.Core;",
			"using ${1:Project}.Core.ApiQuery;",
			"using ${1:Project}.Data.Entities;",
			"",
			"namespace ${1:Project}.Data.Extensions",
			"{",
			    "\tpublic static class ${2:Singular}Extensions",
			    "\t{",
			        "\t\tstatic IQueryable<${2:Singular}> Search(this IQueryable<${2:Singular}> ${3:plural}, string search) =>",
			            "\t\t\t${3:plural}.Where(x => x.${4:Prop}.ToLower().Contains(search.ToLower()));",
			"",
			        "\t\tpublic static async Task<QueryResult<${2:Singular}>> Query${5:Plural}(",
			            "\t\t\tthis AppDbContext db,",
			            "\t\t\tstring page,",
			            "\t\t\tstring pageSize,",
			            "\t\t\tstring search,",
			            "\t\t\tstring sort",
			        "\t\t) {",
			            "\t\t\tvar container = new QueryContainer<${2:Singular}>(",
			                "\t\t\t\tdb.${5:Plural},",
			                "\t\t\t\tpage, pageSize, search, sort",
			            "\t\t\t);",
			"",
            			"\t\t\treturn await container.Query((${3:plural}, s) => ${3:plural}.Search(s));",
        			"\t\t}",
			"",
			        "\t\tpublic static async Task<${2:Singular}> Get${2:Singular}(this AppDbContext db, int id) =>",
			            "\t\t\tawait db.${5:Plural}",
			                "\t\t\t\t.FindAsync(id);",
			"",
			        "\t\tpublic static async Task Add${2:Singular}(this AppDbContext db, ${2:Singular} ${6:singular})",
			        "\t\t{",
			            "\t\t\tif (await ${6:singular}.Validate(db))",
			            "\t\t\t{",
			                "\t\t\t\tawait db.${5:Plural}.AddAsync(${6:singular});",
			                "\t\t\t\tawait db.SaveChangesAsync();",
			            "\t\t\t}",
			        "\t\t}",
			"",
			        "\t\tpublic static async Task Update${2:Singular}(this AppDbContext db, ${2:Singular} ${6:singular})",
			        "\t\t{",
			            "\t\t\tif (await ${6:singular}.Validate(db))",
			            "\t\t\t{",
			                "\t\t\t\tdb.${5:Plural}.Update(${6:singular});",
			                "\t\t\t\tawait db.SaveChangesAsync();",
			            "\t\t\t}",
			        "\t\t}",
			"",
			        "\t\tpublic static async Task Remove${2:Singular}(this AppDbContext db, ${2:Singular} ${6:singular})",
			        "\t\t{",
			            "\t\t\tdb.${5:Plural}.Remove(${6:singular});",
			            "\t\t\tawait db.SaveChangesAsync();",
			        "\t\t}",
			"",
			        "\t\tstatic async Task<bool> Validate(this ${2:Singular} ${6:singular}, AppDbContext db)",
			        "\t\t{",
			            "\t\t\tif (string.IsNullOrEmpty(${6:singular}.${4:Prop}))",
			            "\t\t\t{",
			                "\t\t\t\tthrow new AppException(\"${2:Singular} must have a ${7:prop}\", ExceptionType.Validation);",
			            "\t\t\t}",
			"",
			            "\t\t\tvar check = await db.${5:Plural}",
			                "\t\t\t\t.FirstOrDefaultAsync(x =>",
			                    "\t\t\t\t\tx.Id != ${6:singular}.Id &&",
			                    "\t\t\t\t\tx.${4:Prop}.ToLower() == ${6:singular}.${4:Prop}.ToLower()",
			                "\t\t\t\t);",
			"",
			            "\t\t\tif (check != null)",
			            "\t\t\t{",
			                "\t\t\t\tthrow new AppException($\"{${6:singular}.${4:Prop}} is already a ${2:Singular}\", ExceptionType.Validation);",
			            "\t\t\t}",
			"",
			            "\t\t\treturn true;",
			        "\t\t}",
			"",
			        "\t\t$0",
			    "\t}",
			"}"
        ]
    },
    "Extension Method": {
        "prefix": [ "dna.ext-method" ],
        "body": [
            "public static async Task ${1:Method}(this ${2:Type} ${3:arg})",
            "{",
                "\t$0",
            "}"
        ]
    },
    "Extension Query Method": {
        "prefix": [ "dna.ext-query" ],
        "body": [
            "public static async Task<QueryResult<${1:T}>> Query${2:Plural}(",
                "\tthis AppDbContext db,",
                "\tstring page,",
                "\tstring pageSize,",
                "\tstring search,",
                "\tstring sort,",
            ") {",
                "\tvar container = new QueryContainer<${1:T}>(",
                    "\t\tdb.${2:Plural}$0,",
                    "\t\tpage, pageSize, search, sort",
                "\t);",
            "",
                "\treturn await container.Query((${3:plural}, s) => ${3:plural}.Search(s));",
            "}"
        ]
    },
    "Extension Get Method": {
        "prefix": [ "dna.ext-get" ],
        "body": [
            "public static async Task<${1:T}> ${2:Get}(this AppDbContext db)",
            "{",
                "\t$0",
            "}"
        ]
    },
    "Extension Entity Method": {
        "prefix": [ "dna.ext-entity" ],
        "body": [
            "public static async Task ${1:Method}(this AppDbContext db, ${2:T} ${3:arg})",
            "{",
                "\t$0",
            "}"
        ]
    },
    "Extension Validate Method": {
        "prefix": [ "dna.ext-validate" ],
        "body": [
            "public static bool Validate(this ${1:T} ${2:arg})",
            "{",
                "\t$0",
                "",
                "\treturn true;",
            "}"
        ]
    },
    "Extension Validate Async Method": {
        "prefix": [ "dna.ext-validate-async" ],
        "body": [
            "public static async Task<bool> Validate(this ${1:T} ${2:arg}, AppDbContext db)",
            "{",
                "\t$0",
                "",
                "\treturn true;",
            "}"
        ]
    },
    "Middleware Class": {
        "prefix": [ "dna.mw-class" ],
        "body": [
            "using System.Threading.Tasks;",
            "using Microsoft.AspNetCore.Http;",
            "",
            "namespace ${1:Namespace}",
            "{",
                "\tpublic class ${2:App}Middleware",
                "\t{",
                    "\t\tprivate readonly RequestDelegate next;",
                    "",
                    "\t\tpublic ${2:App}Middleware(RequestDelegate next)",
                    "\t\t{",
                        "\t\t\tthis.next = next;",
                    "\t\t}",
                    "",
                    "\t\tpublic async Task Invoke(HttpContext context)",
                    "\t\t{",
                        "\t\t\t$0",
                        "",
                        "\t\t\tawait next(context);",
                    "\t\t}",
                "\t}",
            "}"
        ]
    },
    "Middleware Extension": {
        "prefix": [ "dna.mw-extension" ],
        "body": [
            "using ${1:Namespace};",
            "",
            "namespace Microsoft.AspNetCore.Builder",
            "{",
                "\tpublic static class ${2:Middleware}Extensions",
                "\t{",
                    "\t\tpublic static IApplicationBuilder Use${3:App}Middleware(this IApplicationBuilder builder) =>",
                        "\t\t\tbuilder.UseMiddleware<${3:App}Middleware>();",
                "\t}",
            "}"
        ]
    },
    "Controller Class": {
        "prefix": [ "dna.ctl-class" ],
        "body": [
            "using System.Collections.Generic;",
            "using System.Threading.Tasks;",
            "",
            "using Microsoft.AspNetCore.Mvc;",
            "",
            "using ${1:Project}.Data;",
            "using ${1:Project}.Data.Entities;",
            "using ${1:Project}.Data.Extensions;",
            "",
            "namespace ${1:Project}.Web.Controllers",
            "{",
                "\t[Route(\"api/[controller]\")]",
                "\tpublic class ${2:Entity}Controller : Controller",
                "\t{",
                    "\t\tprivate AppDbContext db;",
                    "",
                    "\t\tpublic ${2:Entity}Controller(AppDbContext db)",
                    "\t\t{",
                        "\t\t\tthis.db = db;",
                    "\t\t}",
                    "",
                    "\t\t$0",
                "\t}",
            "}"
        ]
    },
    "Controller Class Baseline": {
        "prefix": [ "dna.ctl-base" ],
        "body": [
            "using System.Collections.Generic;",
			"using System.Threading.Tasks;",
			"",
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"using ${1:Project}.Core.ApiQuery;",
			"using ${1:Project}.Data;",
			"using ${1:Project}.Data.Entities;",
			"using ${1:Project}.Data.Extensions;",
			"",
			"namespace ${1:Project}.Web.Controllers",
			"{",
			    "\t[Route(\"api/[controller]\")]",
			    "\tpublic class ${2:Singular}Controller : Controller",
			    "\t{",
			        "\t\tprivate AppDbContext db;",
			"",
			        "\t\tpublic ${2:Singular}Controller(AppDbContext db)",
			        "\t\t{",
			            "\t\t\tthis.db = db;",
			        "\t\t}",
			"",
			        "\t\t[HttpGet(\"[action]\")]",
			        "\t\t[ProducesResponseType(typeof(QueryResult<${2:Singular}>), 200)]",
			        "\t\tpublic async Task<IActionResult> Query${3:Plural}(",
			            "\t\t\t[FromQuery]string page,",
			            "\t\t\t[FromQuery]string pageSize,",
			            "\t\t\t[FromQuery]string search,",
			            "\t\t\t[FromQuery]string sort",
			        "\t\t) => Ok(await db.Query${3:Plural}(page, pageSize, search, sort));",
			"",
			        "\t\t[HttpGet(\"[action]/{id}\")]",
			        "\t\tpublic async Task<${2:Singular}> Get${2:Singular}([FromRoute]int id) => await db.Get${2:Singular}(id);",
			"",
			        "\t\t[HttpPost(\"[action]\")]",
			        "\t\tpublic async Task Add${2:Singular}([FromBody]${2:Singular} ${4:singular}) => await db.Add${2:Singular}(${4:singular});",
			"",
			        "\t\t[HttpPost(\"[action]\")]",
			        "\t\tpublic async Task Update${2:Singular}([FromBody]${2:Singular} ${4:singular}) => await db.Update${2:Singular}(${4:singular});",
			"",
			        "\t\t[HttpPost(\"[action]\")]",
			        "\t\tpublic async Task Remove${2:Singular}([FromBody]${2:Singular} ${4:singular}) => await db.Remove${2:Singular}(${4:singular});",
			    "\t}",
			"}"
        ]
    },
    "Controller Query Method": {
        "prefix": [ "dna.ctl-query" ],
        "body": [
            "[HttpGet(\"[action]\")]",
            "[ProducesResponseType(typeof(QueryResult<${1:T}>), 200)]",
            "public async Task<IActionResult> Query${2:Plural}(",
            "\t[FromQuery]string page,",
            "\t[FromQuery]string pageSize,",
            "\t[FromQuery]string search,",
            "\t[FromQuery]string sort",
            ") => Ok(await db.Query${2:Plural}(page, pageSize, search, sort));"
        ]
    },
    "Controller Get Method": {
        "prefix": [ "dna.ctl-get" ],
        "body": [
            "[HttpGet(\"[action]\")]",
            "public async Task<${1:T}> ${2:Get}() => await db.${2:Get}();"
        ]
    },
    "Controller Get Method Routed": {
        "prefix": [ "dna.ctl-get-routed" ],
        "body": [
            "[HttpGet(\"[action]/{${1:param}}\")]",
            "public async Task<${2:T}> ${3:Get}([FromRoute]${4:type} ${1:param}) => await db.${3:Get}(${1:param});"
        ]
    },
    "Controller Post Method": {
        "prefix": [ "dna.ctl-post" ],
        "body": [
            "[HttpPost(\"[action]\")]",
            "public async Task ${1:Post}([FromBody]${2:T} ${3:arg}) => await db.${1:Post}(${3:arg});"
        ]
    },
    "Controller Upload Method": {
        "prefix": [ "dna.ctl-upload" ],
        "body": [
            "[HttpPost(\"[action]\")]",
            "[DisableRequestSizeLimit]",
            "public async Task<${1:T}> ${2:Upload}() =>",
                "\tawait db.${2:Upload}(",
                    "\t\tRequest.Form.Files,",
                    "\t\tconfig.DirectoryBasePath,",
                    "\t\tconfig.UrlBasePath",
                "\t);"
        ]
    },
    "SignalR Hub Class": {
        "prefix": [ "dna.sgl-hub" ],
        "body": [
            "using System;",
            "using System.Linq;",
            "using System.Threading.Tasks;",
            "using Microsoft.AspNetCore.SignalR;",
            "",
            "namespace ${1:Project}.Web.Hubs",
            "{",
                "\tpublic class ${2:Data}Hub : Hub",
                "\t{",
                    "\t\t$0",
                "\t}",
            "}"
        ]
    },
    "SignalR Hub Trigger": {
        "prefix": [ "dna.sgl-trigger" ],
        "body": [
            "public async Task trigger${1:Action}(${2:T} ${3:arg})",
            "{",
                "\tawait Clients.${4:SendAll}(${3:arg}).SendAsync(\"${5:method}\");",
            "}"
        ]
    }
}